# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: event_relay.proto for package 'eventrelay'
# Original file comments:
# *
# EventRelay is a simple easy to implement event streaming system.

require 'grpc'
require_relative './event_relay_pb'

module Eventrelay
  module Events
    class Service
      include ::GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'eventrelay.Events'

      rpc :PublishEvents, ::Eventrelay::PublishEventsRequest, ::Eventrelay::PublishEventsResponse
      rpc :PullEvents, ::Eventrelay::PullEventsRequest, ::Eventrelay::PullEventsResponse
    end

    Stub = Service.rpc_stub_class
  end

  module Metrics
    class Service
      include ::GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'eventrelay.Metrics'

      rpc :ListMetrics, ::Eventrelay::ListMetricsRequest, ::Eventrelay::ListMetricsResponse
      rpc :GetMetric, ::Eventrelay::GetMetricRequest, ::Eventrelay::GetMetricResponse
      rpc :CreateMetric, ::Eventrelay::CreateMetricRequest, ::Eventrelay::CreateMetricResponse
      rpc :DeleteMetric, ::Eventrelay::DeleteMetricRequest, ::Eventrelay::DeleteMetricResponse
      rpc :GetMetricValue, ::Eventrelay::GetMetricValueRequest, ::Eventrelay::GetMetricValueResponse
    end

    Stub = Service.rpc_stub_class
  end

  module Topics
    class Service
      include ::GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'eventrelay.Topics'

      rpc :ListTopics, ::Eventrelay::ListTopicsRequest, ::Eventrelay::ListTopicsResponse
      rpc :CreateTopic, ::Eventrelay::CreateTopicRequest, ::Eventrelay::CreateTopicResponse
      rpc :DeleteTopic, ::Eventrelay::DeleteTopicRequest, ::Eventrelay::DeleteTopicResponse
    end

    Stub = Service.rpc_stub_class
  end

  module Subscriptions
    class Service
      include ::GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'eventrelay.Subscriptions'

      rpc :ListSubscriptions, ::Eventrelay::ListSubscriptionsRequest, ::Eventrelay::ListSubscriptionsResponse
      rpc :GetSubscription, ::Eventrelay::GetSubscriptionRequest, ::Eventrelay::GetSubscriptionResponse
      rpc :CreateSubscription, ::Eventrelay::CreateSubscriptionRequest, ::Eventrelay::CreateSubscriptionResponse
      rpc :DeleteSubscription, ::Eventrelay::DeleteSubscriptionRequest, ::Eventrelay::DeleteSubscriptionResponse
    end

    Stub = Service.rpc_stub_class
  end

  module ApiKeys
    class Service
      include ::GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'eventrelay.ApiKeys'

      rpc :CreateApiKey, ::Eventrelay::CreateApiKeyRequest, ::Eventrelay::CreateApiKeyResponse
      rpc :RevokeApiKey, ::Eventrelay::RevokeApiKeyRequest, ::Eventrelay::RevokeApiKeyResponse
      rpc :AddSubscriptionsToApiKey, ::Eventrelay::AddSubscriptionsToApiKeyRequest,
          ::Eventrelay::AddSubscriptionsToApiKeyResponse
      rpc :DeleteSubscriptionsFromApiKey, ::Eventrelay::DeleteSubscriptionsFromApiKeyRequest,
          ::Eventrelay::DeleteSubscriptionsFromApiKeyResponse
      rpc :AddTopicsToApiKey, ::Eventrelay::AddTopicsToApiKeyRequest, ::Eventrelay::AddTopicsToApiKeyResponse
      rpc :DeleteTopicsFromApiKey, ::Eventrelay::DeleteTopicsFromApiKeyRequest,
          ::Eventrelay::DeleteTopicsFromApiKeyResponse
    end

    Stub = Service.rpc_stub_class
  end

  module JWT
    class Service
      include ::GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'eventrelay.JWT'

      rpc :CreateJWT, ::Eventrelay::CreateJWTRequest, ::Eventrelay::CreateJWTResponse
    end

    Stub = Service.rpc_stub_class
  end
end
